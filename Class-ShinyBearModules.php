<?php

/**
 * ShinyBearModules
 *
 * The purpose of this file is, the main file, handles the hooks, the actions, permissions, load needed files, etc.
 * @package Shiny Bear mod
 * @version 1.0 Alpha
 * @author John Rayes <live627@gmail.com>
 * @copyright Copyright (c) 2012, John Rayes
 * @license http://www.mozilla.org/MPL/MPL-1.1.html
 */

/*
 * Version: MPL 1.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file excsbt in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is http://livemods.net code.
 *
 * The Initial Developer of the Original Code is
 * John Rayes.
 * Portions created by the Initial Developer are Copyright (c) 2012
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 */

interface shinyBearModule
{
	public function __construct($field);

	function output();
}

abstract class shinyBearModuleBase implements shinyBearModule
{
	protected $fields;
	protected $err;

	/*
	 * Constructs the module.
	 *
	 * @param array $field
	 * @access public
	 * @return void
	 */
	public function __construct($fields = null)
	{
		$this->fields = $fields;
		$this->err = false;
	}

	/*
	 * Gets the error generated by the validation method.
	 *
	 * @access public
	 * @return mixed The error string or false for no error.
	 */
	function getError()
	{
		return $this->err;
	}

	function error($type = 'error', $error_type = 'general', $log_error = false, $echo = true)
	{
		global $txt;

		// All possible pre-defined types.
		$valid_types = array(
			'mod_not_installed' => $type == 'mod_not_installed' ? 1 : 0,
			'not_allowed' => $type == 'not_allowed' ? 1 : 0,
			'no_language' => $type == 'no_language' ? 1 : 0,
			'query_error' => $type == 'query_error' ? 1 : 0,
			'empty' => $type == 'empty' ? 1 : 0,
			'error' => $type == 'error' ? 1 : 0,
		);

		//sb_call_hook('echo $this->error', array(&$type));

		$error_string = !empty($valid_types[$type]) ? $txt['sb_module_' . $type] : $type;
		$error_html = $error_type == 'critical' ? array('<p class="error">', '</p>') : array('', '');

		// Don't need this anymore!
		unset($valid_types);

		// Should it be logged?
		if ($log_error)
			log_error($error_string, $error_type);

		$this->err = implode($error_string, $error_html);

		return $this->err;
	}
}

class shinyBearModule_usercp extends shinyBearModuleBase
{
	/*
	 * Gets the current URL as specified by $_SERVER['REQUEST_URL']
	 */
	private function getUrl()
	{
		global $scripturl;

		$cur_url = $_SERVER['REQUEST_URL'];

		return $cur_url;
	}

	function output()
	{
		global $context, $txt, $scripturl, $settings, $user_info;

		// Only display this info if we are logged in.
		if (!$user_info['is_guest'])
		{
			// Set the logout variable.
			$context['sb_usercp'] = array(
				'profile' => array('text' => 'profile', 'lang' => true, 'url' => $scripturl . '?action=profile'),
				'logout' => array('text' => 'logout', 'lang' => true, 'url' => $scripturl . '?action=logout;' . $context['session_var'] . '=' . $context['session_id']),
			);

			// Allow mods to add additional buttons here
			call_integration_hook('integrate_sb_usercp');

			$_SESSION['logout_url'] = $this->getUrl();

			// What does the user want the time formatted as?
			$s = strpos($user_info['time_format'], '%S') === false ? '' : ':%S';
			if (strpos($user_info['time_format'], '%H') === false && strpos($user_info['time_format'], '%T') === false)
			{
				$h = strpos($user_info['time_format'], '%l') === false ? '%I' : '%l';
				$time_fmt = $h . ':%M' . $s . ' %p';
			}
			else
				$time_fmt = '%H:%M' . $s;

			echo '
					<strong class="largetext">', $txt['sb_hello'], ', ', $user_info['name'], '</strong><br />';

			if (!empty($user_info['avatar']['image']))
				echo '
					<div style="padding: 1ex">
						<a href="', $scripturl, '?action=profile">', $user_info['avatar']['image'], '</a>
					</div>';
			else
				echo '
					<br />';

			echo '
					<ul class="usercp bullet">
						<li>', $txt['total_posts'], ': ', $user_info['posts'], '</li>
						<li>', $txt['view'], ': <a href="', $scripturl, '?action=unread">', $txt['sb_user_posts'], '</a> | <a href="', $scripturl, '?action=unreadreplies">', $txt['sb_user_replies'], '</a></li>
						<li>', $txt['view'], ': <a href="', $scripturl, '?action=pm">', $txt['sb_inbox'], '</a> | <a href="', $scripturl, '?action=pm;f=sent">', $txt['sb_outbox'], '</a></li>
						<li><a href="', $scripturl, '?action=helpadmin;help=see_admin_ip" onclick="return reqWin(this.href);" class="help">', $user_info['ip'], '</a></li>
						<li>', timeformat(time(), '%a, ' . $time_fmt), '</li>
					</ul>
					', template_button_strip($context['sb_usercp'], ''), '';
		}
		// They're a guest? Show the guest info here instead, and a login box.
		else
		{
			$_SESSION['login_url'] = $this->getUrl();

			echo '
					', $txt['hello_guest'], ' <strong>', $txt['guest'], '</strong>.<br />
					', $txt['login_or_register'], '<br />
					<br />
					<form action="', $scripturl, '?action=login2" method="post">
						<table border="0" cellspacing="2" cellpadding="0" class="table">
							<tr>
								<td class="lefttext"><label for="user">', $txt['sb_login_user'], ':</label>&nbsp;</td>
								<td class="lefttext"><input type="text" name="user" id="user" size="10" /></td>
							</tr>
							<tr>
								<td class="lefttext"><label for="passwrd">', $txt['password'], ':</label>&nbsp;</td>
								<td class="lefttext"><input type="password" name="passwrd" id="passwrd" size="10" /></td>
							</tr>
							<tr>
								<td class="lefttext"><label for="cookielength">', $txt['sb_length'], '</label>&nbsp;</td>
								<td>
								<select name="cookielength" id="cookielength">
									<option value="60">', $txt['one_hour'], '</option>
									<option value="1440">', $txt['one_day'], '</option>
									<option value="10080">', $txt['one_week'], '</option>
									<option value="302400">', $txt['one_month'], '</option>
									<option value="-1" selected="selected">', $txt['forever'], '</option>
								</select>
								</td>
							</tr>
							<tr>
								<td class="righttext" colspan="2"><input type="submit" value="', $txt['login'], '" class="button_submit" /></td>
							</tr>
						</table>
					</form>
					', $txt['welcome_guest_activate'], '';
		}
	}
}

class shinyBearModule_stats extends shinyBearModuleBase
{
	public function output()
	{
	global $txt, $smcFunc, $scripturl, $settings, $modSettings, $context;

	// Grab the params, if they exist.
	if (is_array($this->fields))
	{
		if (empty($this->fields['stat_choices']))
		{
			echo $this->error();
			return;
		}
		else
			$stat_choices = explode(',', $this->fields['stat_choices']);

		$totals = array();

		if (isset($stat_choices[3]))
		{
			// How many cats? Er... categories. Not cats...xD
			$request = $smcFunc['db_query']('', '
				SELECT COUNT(id_cat)
				FROM {db_prefix}categories');
			list ($totals['cats']) = $smcFunc['db_fetch_row']($request);
			$smcFunc['db_free_result']($request);
		}

		if (isset($stat_choices[4]))
		{
			// How many boards?
			$request = $smcFunc['db_query']('', '
				SELECT COUNT(id_board)
				FROM {db_prefix}boards
				WHERE redirect = {string:blank_redirect}',
				array(
					'blank_redirect' => '',
				)
			);
			list ($totals['boards']) = $smcFunc['db_fetch_row']($request);
			$smcFunc['db_free_result']($request);
		}

		// Start the output.
		echo '
					<ul class="stats bullet">';

		foreach ($stat_choices as $type)
		{
			echo '
						<li>';

			switch ($type)
			{
				case 0:
					echo $txt['total_members'] . ': <a href="' . $scripturl . '?action=mlist">' . comma_format($modSettings['totalMembers']) . '</a>';
					break;
				case 1:
					echo $txt['total_posts'] . ': ' . comma_format($modSettings['totalMessages']);
					break;
				case 2:
					echo $txt['total_topics'] . ': ' . comma_format($modSettings['totalTopics']);
					break;
				case 3:
					echo $txt['total_cats'] . ': ' . comma_format($totals['cats']);
					break;
				case 4:
					echo $txt['total_boards'] . ': ' . comma_format($totals['boards']);
					break;
				case 5:
					echo $txt['most_online_today'] . ': ' . comma_format($modSettings['mostOnlineToday']);
					break;
				default: // case 6:
					echo $txt['most_online_ever'] . ': ' . comma_format($modSettings['mostOnline']);
					break;
			}
			echo '</li>';
		}
		echo '
					</ul>';

		// No longer need this.
		unset($totals);

	}
	else
		echo $this->error();
}
}

class shinyBearModule_announce extends shinyBearModuleBase
{
	public function output()
	{
		global $context;

		// Grab the parameters, if they exist.
		if (is_array($this->fields))
		{
			$msg = html_entity_decode($this->fields['msg'], ENT_QUOTES);

			// Does this exist?
			if (!empty($msg))
				echo parse_bbc($msg);
			// No? Error!
			else
				echo $this->error();
		}
		// I guess $this->fields isn't an array....shame.
		else
			echo $this->error();
	}
}

class shinyBearModule_news extends shinyBearModuleBase
{
	/**
	 * Cuts a string up until a given number of words.
	 * - Doesn't slice words. It CAN interrupt a sentence, however...
	 * - Preserves all whitespace characters.
	 *
	 * @access private
	 * @since 1.0
	 * @param string $string The input string
	 * @param int $limit Maximum number of words to show. Default is 70.
	 * $param string $rsb What to append if $string contains more words than specified by 4max. Default is three dots.
	 *
	 * @return string The truncated string.
	 */
	private function truncate($string, $limit = 70, $rsb = '...')
	{
		$words = preg_split('/(\s)+/', $string, $limit + 1, PREG_SPLIT_DELIM_CAPTURE);
		$newstring = '';
		$numwords = 0;

		foreach ($words as $k => $word)
			if (preg_match('/(\S)+/', $word))
			{
				if ($numwords < $limit)
				{
					$newstring .= $word;
					if (isset($words[$k + 1]) && preg_match('/(\s)+/', $words[$k + 1]))
					{
						$newstring .= $words[$k + 1];
						++$numwords;
					}
				}
			}

		if ($numwords >= $limit)
			$newstring .= $rsb;

		return $newstring;
	}

	/**
	 * Fetches topics from a board.
	 *
	 * This function is split into three basic queries:
	 * - Fetches the specified board. If the user cannot see or wants to ignore it, screw it.
	 * - Gets the list of topiics. Returns an empty array if none are found.
	 * - And finally, the third query actually fetches the meat and bone of the first message in each topic.
	 *
	 * What is the use of all this without caching? We love cash! Especially greenbacks!
	 *
	 * @access private
	 * @since 1.0
	 * @param int $board The ID of the board to get. Required.
	 * @param int $limit Maximum number of topics to show. Default is 5.
	 * $param bool $ignore Whether or not to honor ignored boards. Default is false.
	 *
	 * @return array All the posts found.
	 */
	private function boardNews($board, $limit = 5, $ignore = false)
	{
		global $scripturl, $settings, $smcFunc, $modSettings;

		$request = $smcFunc['db_query']('', '
			SELECT b.id_board
			FROM {db_prefix}boards AS b
			WHERE b.id_board = {int:current_board}
				AND {query' . ($ignore ? '_wanna' : '') . '_see_board}
			LIMIT 1',
			array(
				'current_board' => $board,
			)
		);

		if ($smcFunc['db_num_rows']($request) == 0)
			return array();

		list ($board) = $smcFunc['db_fetch_row']($request);
		$smcFunc['db_free_result']($request);

		$request = $smcFunc['db_query']('', '
			SELECT id_first_msg
			FROM {db_prefix}topics
			WHERE id_board = {int:current_board}' . ($modSettings['postmod_active'] ? '
				AND approved = {int:is_approved}' : '') . '
			LIMIT ' . $limit,
			array(
				'current_board' => $board,
				'is_approved' => 1,
			)
		);

		$post_list = array();
		while ($row = $smcFunc['db_fetch_assoc']($request))
			$post_list[] = $row['id_first_msg'];
		$smcFunc['db_free_result']($request);

		if (empty($post_list))
			return array();

		$request = $smcFunc['db_query']('', '
			SELECT
				m.subject, IFNULL(mem.real_name, m.poster_name) AS poster_name, m.poster_time,
				t.num_replies, t.num_views, m.body, m.smileys_enabled, m.id_msg, m.icon,
				t.id_topic, m.id_member
			FROM {db_prefix}topics AS t
				INNER JOIN {db_prefix}messages AS m ON (m.id_msg = t.id_first_msg)
				LEFT JOIN {db_prefix}members AS mem ON (mem.id_member = m.id_member)
			WHERE t.id_first_msg IN ({array_int:post_list})',
			array(
				'post_list' => $post_list,
			)
		);

		$stable_icons = array('xx', 'thumbup', 'thumbdown', 'exclamation', 'question', 'lamp', 'smiley', 'angry', 'cheesy', 'grin', 'sad', 'wink', 'poll', 'moved', 'recycled', 'wireless');
		$icon_sources = array();
		foreach ($stable_icons as $icon)
			$icon_sources[$icon] = 'images_url';

		$can_reply_own = allowedTo('post_reply_own');
		$can_reply_any = allowedTo('post_reply_any');
		$can_moderate = allowedTo('moderate_board');

		$posts = array();
		while ($row = $smcFunc['db_fetch_assoc']($request))
		{
			$row['body'] = $this->truncate(strip_tags(strtr(parse_bbc($row['body'], $row['smileys_enabled'], $row['id_msg']), array('<br />' => "\n"))), 10);
			$row['body'] = parse_bbc($row['body'], $row['smileys_enabled'], $row['id_msg']  . '-prv');

			// Censor the subject.
			censorText($row['subject']);
			censorText($row['body']);

			$color_class = '';
			// Pinned topics should get a different color, too.
			if (!empty($row['is_sticky']))
				$color_class .= ' sticky';
			// Locked topics get special treatment as well.
			if (!empty($row['locked']))
				$color_class .= ' locked';

			// Build the array.
			$posts[$row['id_msg']] = array(
				'id' => $row['id_msg'],
				'subject' => $row['subject'],
				'replies' => $row['num_replies'],
				'views' => $row['num_views'],
				'short_subject' => shorten_subject($row['subject'], 25),
				'preview' => $row['body'],
				'time' => timeformat($row['poster_time']),
				'href' => $scripturl . '?topic=' . $row['id_topic'] . '.0',
				'link' => '<a href="' . $scripturl . '?topic=' . $row['id_topic'] . '.msg' . $row['id_msg'] . '#new" rel="nofollow">' . $row['subject'] . '</a>',
				'poster' => !empty($row['id_member']) ? '<a href="' . $scripturl . '?action=profile;u=' . $row['id_member'] . '">' . $row['poster_name'] . '</a>' : $row['poster_name'],
				'icon' => '<img src="' . $settings[$icon_sources[$row['icon']]] . '/post/' . $row['icon'] . '.png" class="icon" alt="' . $row['icon'] . '" />',
				'can_reply' => !empty($row['locked']) ? $can_moderate : $can_reply_any || ($can_reply_own && $row['first_id_member'] == $user_info['id']),
				'style' => $color_class,
			);
		}

		$smcFunc['db_free_result']($request);

		krsort($posts);
		return $posts;
	}

	public function output()
	{
		global $context, $txt, $options, $scripturl;

		$board = empty($this->fields['board']) ? 1 : $this->fields['board'];
		$limit = empty($this->fields['limit']) ? 5 : $this->fields['limit'];

		// Store the board news
		$input = $this->boardNews($board, $limit);

		// Default - Any content?
		if (empty($input))
		{
			echo $this->error('empty');
			return;
		}

		$use_bg2 = true;
		foreach ($input as $topic)
		{
			$use_bg2 = !$use_bg2;

			echo '
						<div class="title_bar">
							<h3 class="titlebg">
								', $topic['icon'], '
								', $topic['subject'], '
							</h3>
						</div>
						<div class="', $use_bg2 ? 'windowbg2' : 'windowbg', $topic['style'], '">';

			echo '
							<p class="smalltext">', $txt['posted_by'], ' ', $topic['poster'], ' | ', $topic['time'], '
							(', $topic['views'], ' ', $txt['views'], ')';

			if (!empty($topic['replies']) || $topic['can_reply'])
			{
				if (!empty($topic['replies']))
					echo '
							<a href="', $topic['href'], '">', $topic['replies'], ' ', $txt['replies'], '</a>';

					if ($topic['can_reply'])
						echo ' | ';

				if ($topic['can_reply'])
				{
					// If quick reply is open, point directly to it, otherwise use the regular reply page
					if (empty($options['display_quick_reply']) || $options['display_quick_reply'] != 2)
						$reply_url = $scripturl . '?action=post;topic=' . $topic['id'] . '.0;last_msg=' . $topic['id'];
					else
						$reply_url = substr($topic['href'], 0, strpos($topic['href'], '#')) . '#quickreply';

					echo '
							<a href="', $reply_url, '">', $txt['reply'], '</a>';
				}

				echo '
							</p>';
			}

			echo '
							', $topic['preview'], '
						</div>';
		}
	}
}

class shinyBearModule_recent extends shinyBearModuleBase
{

	/**
	 * Fetches recent topics.
	 *
	 * This function is split into three basic queries:
	 * - Fetches the topics and their respective boards, ignoring those the user cannot see or wants to ignore. Returns an empty array if none are found.
	 * - If the logged user is not a guest, count the number of new posts per topic.
	 * - And finally, the third query actually fetches the meat and bone of the first message in each topic.
	 *
	 * Several major diifferences set this function apart from ssi_recentTopics():
	 * - The huge, scary, hulking query is split in two. Shaves time off here. Went from evaluating potentially (many) many null rows at a Cartesian product level, down to a known subset. Immediate savings.
	 * - Unread count for members.
	 * - Cache. Can never get enough.
	 *
	 * @access private
	 * @since 1.0
	 * @param int $num_recent Maximum number of topics to show. Default is 8.
	 * $param bool $me Whether or not to only show topics started by the current member. Default is false.
	 * $param bool $ignore Whether or not to honor ignored boards. Default is true.
	 * @param array $exclude_boards Boards to exclude as array values. Default is null.
	 * @param array $include_boards Boards to include as array values. Do note that, if specifiied, posts coming only from these boards will be counted. Default is null.
	 *
	 * @return array All the posts found.
	 */
	private function getTopics($num_recent = 8, $me = false, $ignore = true, $exclude_boards = null, $include_boards = null)
	{
		global $context, $modSettings, $scripturl, $smcFunc, $user_info;

		if ($exclude_boards === null && !empty($modSettings['recycle_enable']) && $modSettings['recycle_board'] > 0)
			$exclude_boards = array($modSettings['recycle_board']);
		else
			$exclude_boards = empty($exclude_boards) ? array() : (is_array($exclude_boards) ? $exclude_boards : array($exclude_boards));

		// Only some boards?.
		if (is_array($include_boards) || (int) $include_boards === $include_boards)
			$include_boards = is_array($include_boards) ? $include_boards : array($include_boards);
		elseif ($include_boards != null)
			$include_boards = array();

		// Find all the posts in distinct topics. Newer ones will have higher IDs.
		$request = $smcFunc['db_query']('', '
			SELECT
				t.id_topic, b.id_board, b.name AS board_name
			FROM {db_prefix}topics AS t
				INNER JOIN {db_prefix}messages AS ml ON (ml.id_msg = t.id_last_msg)
				LEFT JOIN {db_prefix}boards AS b ON (b.id_board = t.id_board)
			WHERE t.id_last_msg >= {int:min_message_id}' . (empty($exclude_boards) ? '' : '
				AND b.id_board NOT IN ({array_int:exclude_boards})') . (empty($include_boards) ? '' : '
				AND b.id_board IN ({array_int:include_boards})') . '
				AND {query' . ($ignore ? '_wanna' : '') . '_see_board}' . ($modSettings['postmod_active'] ? '
				AND t.approved = {int:is_approved}
				AND ml.approved = {int:is_approved}' : '') . ($me ? '
				AND t.id_member_started = {int:current_member}' : '') . '
			LIMIT ' . $num_recent,
			array(
				'include_boards' => empty($include_boards) ? '' : $include_boards,
				'exclude_boards' => empty($exclude_boards) ? '' : $exclude_boards,
				'min_message_id' => $modSettings['maxMsgID'] - 35 * min($num_recent, 5),
				'is_approved' => 1,
				'current_member' => $user_info['id'],
			)
		);
		$topics = array();
		while ($row = $smcFunc['db_fetch_assoc']($request))
			$topics[$row['id_topic']] = $row;
		$smcFunc['db_free_result']($request);

		// Did we find anything? If not, bail.
		if (empty($topics))
			return array();
		$topic_list = array_keys($topics);

		// Count number of new posts per topic.
		if (!$user_info['is_guest'])
		{
			$request = $smcFunc['db_query']('', '
				SELECT
					m.id_topic, COUNT(DISTINCT m.id_msg) AS co, IFNULL(lt.id_msg, IFNULL(lmr.id_msg, -1)) + 1 AS new_from
				FROM {db_prefix}messages AS m
					LEFT JOIN {db_prefix}log_topics AS lt ON (lt.id_topic = m.id_topic AND lt.id_member = {int:current_member})
					LEFT JOIN {db_prefix}log_mark_read AS lmr ON (lmr.id_board = m.id_board AND lmr.id_member = {int:current_member})
				WHERE
					m.id_topic IN ({array_int:topic_list})
					AND (m.id_msg > IFNULL(lt.id_msg, IFNULL(lmr.id_msg, 0)))',
				array(
					'current_member' => $user_info['id'],
					'topic_list' => $topic_list
				)
			);
			while ($row = $smcFunc['db_fetch_assoc']($request))
				$topics[$row['id_topic']] += $row;
			$smcFunc['db_free_result']($request);
		}

		$request = $smcFunc['db_query']('', '
			SELECT
				t.id_topic, ml.poster_time, mf.subject, ml.id_topic, ml.id_member, ml.id_msg, t.num_replies, t.num_views,
				IFNULL(mem.real_name, ml.poster_name) AS poster_name, SUBSTRING(ml.body, 1, 384) AS body, ml.smileys_enabled, ml.icon
			FROM {db_prefix}topics AS t
				INNER JOIN {db_prefix}messages AS ml ON (ml.id_msg = t.id_last_msg)
				INNER JOIN {db_prefix}messages AS mf ON (mf.id_msg = t.id_first_msg)
				LEFT JOIN {db_prefix}members AS mem ON (mem.id_member = ml.id_member)
			WHERE t.id_topic IN ({array_int:topic_list})',
			array(
				'current_member' => $user_info['id'],
				'topic_list' => $topic_list,
			)
		);

		$posts = array();
		while ($row = $smcFunc['db_fetch_assoc']($request))
		{
			// $row['body'] = preg_split('/(?<!\d)\.(?!\d)[\s|<br \/>|&nbsp;]/', $row['body']);
			// $row['body'] = strip_tags(strtr(parse_bbc($row['body'][0], $row['smileys_enabled'], $row['id_msg']  . '-prv'), array('<br>' => '&#10;')));

			// Censor the subject.
			censorText($row['subject']);
			censorText($row['body']);

			if (time() - 86400 > $row['poster_time'])
			{
				if (time() - 31557600 < $row['poster_time'])
					$time_fmt = '%d %b';
				else
					$time_fmt = '%d %b %Y';
			}
			else
			{
				// What does the user want the time formatted as?
				$s = strpos($user_info['time_format'], '%S') === false ? '' : ':%S';
				if (strpos($user_info['time_format'], '%H') === false && strpos($user_info['time_format'], '%T') === false)
				{
					$h = strpos($user_info['time_format'], '%l') === false ? '%I' : '%l';
					$time_fmt = $h . ':%M' . $s . ' %p';
				}
				else
					$time_fmt = '%H:%M' . $s;
			}

			// Build the array.
			$posts[$row['id_msg']] = array(
				'board' => array(
					'id' => $topics[$row['id_topic']]['id_board'],
					'name' => $topics[$row['id_topic']]['board_name'],
					'href' => $scripturl . '?board=' . $topics[$row['id_topic']]['id_board'] . '.0',
					'link' => '<a href="' . $scripturl . '?board=' . $topics[$row['id_topic']]['id_board'] . '.0">' . $topics[$row['id_topic']]['board_name'] . '</a>',
				),
				'topic' => $row['id_topic'],
				'poster' => array(
					'id' => $row['id_member'],
					'name' => $row['poster_name'],
					'href' => empty($row['id_member']) ? '' : $scripturl . '?action=profile;u=' . $row['id_member'],
					'link' => empty($row['id_member']) ? $row['poster_name'] : '<a href="' . $scripturl . '?action=profile;u=' . $row['id_member'] . '">' . $row['poster_name'] . '</a>'
				),
				'subject' => $row['subject'],
				'replies' => $row['num_replies'],
				'views' => $row['num_views'],
				'short_subject' => shorten_subject($row['subject'], 25),
				'preview' => $row['body'],
				'time' => timeformat($row['poster_time'], '%a, ' . $time_fmt),
				'href' => $scripturl . '?topic=' . $row['id_topic'] . '.msg' . $row['id_msg'] . ';topicseen#new',
				'link' => '<a href="' . $scripturl . '?topic=' . $row['id_topic'] . '.msg' . $row['id_msg'] . '#new" rel="nofollow">' . $row['subject'] . '</a>',
				'is_new' => !empty($topics[$row['id_topic']]['new_from']),
				'new_from' => empty($topics[$row['id_topic']]['new_from']) ? 0 : $topics[$row['id_topic']]['new_from'],
				'co' => empty($topics[$row['id_topic']]['new_from']) ? 0 : $topics[$row['id_topic']]['co'],
			);
		}
		$smcFunc['db_free_result']($request);

		krsort($posts);
		return $posts;
	}

	public function output()
	{
		global $context, $scripturl, $settings, $user_info;

		$context['topics'] = $this->getTopics();

		// Mark read button
		$context['mark_read_button'] = array(
			'markread' => array('text' => 'mark_as_read', 'image' => 'markread.png', 'lang' => true, 'url' => $scripturl . '?action=markasread;sa=all;' . $context['session_var'] . '=' . $context['session_id']),
		);

		// Allow mods to add additional buttons here
		call_integration_hook('integrate_mark_read_button');

		echo '
						<table class="w100 cp4 cs0 ba table_grid">';

		if (!empty($context['topics']))
			foreach ($context['topics'] as $post)
			{
				echo '
							<tr>
								<td class="w25">
									', $post['poster']['link'], '
								</td>
								<td class="w50">
									', $post['board']['name'], ' &gt; ';

				if ($post['is_new'] && !$user_info['is_guest'] && !empty($post['co']))
					echo '<span class="new_posts">' . $post['co'] . '</span>';

				echo '<a href="', $post['href'], '">', $post['subject'], '</a>
								</td>
								<td class="w25">
									', $post['time'], '
								</td>
							</tr>';
			}
		else
			echo '
							<tr class="windowbg2">
								<td class="center">
									No messages...
								</td>
							</tr>';

		echo '
						</table>';

		// Show the mark all as read button?
		if ($settings['show_mark_read'] && !empty($context['topics']))
		echo '
						<div class="mark_read">', template_button_strip($context['mark_read_button'], 'right'), '</div>';
	}
}

class shinyBearModule_search extends shinyBearModuleBase
{
	public function output()
	{
	global $scripturl, $txt, $context;

	echo '
							<div class="centertext">
								<form action="', $scripturl, '?action=search2" method="post" accsbt-charset="', $context['character_set'], '" name="searchform" id="searchform">
								<div class="centertext" style="margin-top: -5px;"><input name="search" size="18" maxlength="100" tabindex="', $context['tabindex']++, '" type="text" class="input_text" /></div>

								<script type="text/javascript"><!-- // --><![CDATA[
									function initSearch()
									{
										if (document.forms.searchform.search.value.indexOf("%u") != -1)
											document.forms.searchform.search.value = unescape(document.forms.searchform.search.value);
									}
									createEventListener(window);
									window.addEventListener("load", initSearch, false);
								// ]]></script>

								<select name="searchtype" tabindex="', $context['tabindex']++, '" style="margin: 5px 5px 0 0;">
									<option value="1" selected="selected">', $txt['sb_match_all_words'], '</option>
									<option value="2">', $txt['sb_match_any_words'], '</option>
								</select><input style="margin-top: 5px;" name="submit" value="', $txt['search'], '" tabindex="', $context['tabindex']++, '" type="submit" class="button_submit" />
								</form>
							</div>';
}
}

class shinyBearModule_poll extends shinyBearModuleBase
{
	public function output()
	{
		echo 'Not done yet...';
	}
}

class shinyBearModule_online extends shinyBearModuleBase
{
	public function output()
	{
		global $context, $modSettings, $sourcedir, $txt, $user_info;

		// Get the user online list.
		require_once($sourcedir . '/Subs-MembersOnline.php');
		$membersOnlineOptions = array(
			'show_hidden' => allowedTo('moderate_forum'),
			'sort' => 'log_time',
			'reverse_sort' => true,
		);
		$membersOnlineStats = getMembersOnlineStats($membersOnlineOptions);
		$context['show_buddies'] = !empty($user_info['buddies']);
		$context['membergroups'] = cache_quick_get('membergroup_list', 'Subs-Membergroups.php', 'cache_getMembergroupList', array());

		// Handle hidden users and buddies.
		$bracketList = array();
		if ($context['show_buddies'])
			$bracketList[] = comma_format($context['num_buddies']) . ' ' . ($context['num_buddies'] == 1 ? $txt['buddy'] : $txt['buddies']);
		if (!empty($context['num_spiders']))
			$bracketList[] = comma_format($context['num_spiders']) . ' ' . ($context['num_spiders'] == 1 ? $txt['spider'] : $txt['spiders']);
		if (!empty($context['num_users_hidden']))
			$bracketList[] = comma_format($context['num_users_hidden']) . ' ' . $txt['hidden'];

		if (!empty($bracketList))
			echo ' (' . implode(', ', $bracketList) . ')';

		// Ready to begin the output of groups.
		echo '
						<ul class="flow_auto">';

		// Loading up all users
		foreach ($membersOnlineStats['online_groups'] as $group)
		{
			echo '
							<li><strong>' . $group['name'] . '</strong>:
								<ul class="sb_list_indent">';

			foreach ($membersOnlineStats['users_online'] as $user)
				if ($user['group'] == $group['id'])
					echo '
									<li>', $user['hidden'] ? '<em>' . $user['link'] . '</em>' : $user['link'] , '</li>';
			echo '
								</ul>
							</li>';

		}

		echo '
						</ul>';
	}
}

class shinyBearModule_calendar extends shinyBearModuleBase
{
	public function output()
	{
		echo 'Not done yet...';
	}
}

?>